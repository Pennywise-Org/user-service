// @generated by protobuf-ts 2.11.1 with parameter client_grpc1,server_grpc1,use_proto_field_name
// @generated from protobuf file "proto/user/v1/user.proto" (package "proto.user.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Request message for updating a user's plan.
 *
 * @generated from protobuf message proto.user.v1.UpdateUserPlanRequest
 */
export interface UpdateUserPlanRequest {
    /**
     * @generated from protobuf field: string auth0_id = 1
     */
    auth0_id: string; // Auth0 user ID fallback
    /**
     * The ID of the new plan the user is being associated with.
     *
     * @generated from protobuf field: string plan_id = 2
     */
    plan_id: string;
    /**
     * The timestamp when the update was initiated or processed.
     *
     * @generated from protobuf field: string updated_at = 3
     */
    updated_at: string;
}
/**
 * Response message for the UpdateUserPlan RPC.
 *
 * @generated from protobuf message proto.user.v1.UpdateUserPlanResponse
 */
export interface UpdateUserPlanResponse {
    /**
     * Whether the update was successful.
     *
     * @generated from protobuf field: bool success = 1
     */
    success: boolean;
    /**
     * Optional error message if the update failed.
     *
     * @generated from protobuf field: string error_message = 2
     */
    error_message: string;
    /**
     * Optional error code (e.g. 404 for not found, 500 for internal error).
     *
     * @generated from protobuf field: int32 code = 3
     */
    code: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class UpdateUserPlanRequest$Type extends MessageType<UpdateUserPlanRequest> {
    constructor() {
        super("proto.user.v1.UpdateUserPlanRequest", [
            { no: 1, name: "auth0_id", kind: "scalar", localName: "auth0_id", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "plan_id", kind: "scalar", localName: "plan_id", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "updated_at", kind: "scalar", localName: "updated_at", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateUserPlanRequest>): UpdateUserPlanRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.auth0_id = "";
        message.plan_id = "";
        message.updated_at = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateUserPlanRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateUserPlanRequest): UpdateUserPlanRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string auth0_id */ 1:
                    message.auth0_id = reader.string();
                    break;
                case /* string plan_id */ 2:
                    message.plan_id = reader.string();
                    break;
                case /* string updated_at */ 3:
                    message.updated_at = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateUserPlanRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string auth0_id = 1; */
        if (message.auth0_id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.auth0_id);
        /* string plan_id = 2; */
        if (message.plan_id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.plan_id);
        /* string updated_at = 3; */
        if (message.updated_at !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.updated_at);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.user.v1.UpdateUserPlanRequest
 */
export const UpdateUserPlanRequest = new UpdateUserPlanRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateUserPlanResponse$Type extends MessageType<UpdateUserPlanResponse> {
    constructor() {
        super("proto.user.v1.UpdateUserPlanResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "error_message", kind: "scalar", localName: "error_message", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateUserPlanResponse>): UpdateUserPlanResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        message.error_message = "";
        message.code = 0;
        if (value !== undefined)
            reflectionMergePartial<UpdateUserPlanResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateUserPlanResponse): UpdateUserPlanResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* string error_message */ 2:
                    message.error_message = reader.string();
                    break;
                case /* int32 code */ 3:
                    message.code = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateUserPlanResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* string error_message = 2; */
        if (message.error_message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.error_message);
        /* int32 code = 3; */
        if (message.code !== 0)
            writer.tag(3, WireType.Varint).int32(message.code);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.user.v1.UpdateUserPlanResponse
 */
export const UpdateUserPlanResponse = new UpdateUserPlanResponse$Type();
/**
 * @generated ServiceType for protobuf service proto.user.v1.UserService
 */
export const UserService = new ServiceType("proto.user.v1.UserService", [
    { name: "UpdateUserPlan", options: {}, I: UpdateUserPlanRequest, O: UpdateUserPlanResponse }
]);
